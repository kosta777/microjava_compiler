package rs.ac.bg.etf.pp1;

import java.util.ArrayList;

import org.apache.log4j.Logger;

import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;
import sun.tools.tree.AddExpression;

public class SemanticAnalyzer extends VisitorAdaptor 
{
	
	public static final Struct BoolType = new Struct(Struct.Bool);
	public static final Struct EnumType = new Struct(Struct.Enum, Tab.intType);
	
	
	public int nVars;
	public int nArrays;
	public int nConstants;
	public int nLocalsInMain;
	public int nStatementsInMain;
	
	static int enumidfree = 10;
	Logger log = Logger.getLogger(getClass());
	Struct currentType;
	Obj currentMethod = null;
	String currentMethodName = "";
	
	Obj currentEnum;
	Struct currentDesignatorType;
	int currentEnumValue;
	ArrayList<Integer> enumValues;
	ArrayList<Obj> declaredEnums;
	int lastAccessedEnum = -1;
	DumpSymbolTableVisitor dumpVisitor = new KostaDumpTableVisitor();
	
	int lastArraySize;
	
	boolean errorDetected;
	boolean hasMain;
	
	
	
	public SemanticAnalyzer()
	{
		Tab.init();
		Tab.currentScope().addToLocals(new Obj(Obj.Type, "bool", BoolType));
		Tab.currentScope().addToLocals(new Obj(Obj.Type, "enum", EnumType));
				
		errorDetected = false;
		hasMain = false;
		nVars = 0;
		nArrays = 0;
		nConstants = 0;
		nLocalsInMain = 0;
		nStatementsInMain = 0;
		
		declaredEnums = new ArrayList<Obj>();
	}
	
	
	private boolean isDeclared(String name)
	{
		Obj obj = Tab.currentScope.findSymbol(name);
		if(obj == Tab.noObj || obj == null)
			return false;
		return true;
	}

	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.error(msg.toString());
	}
	
	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message); 
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.info(msg.toString());
	}
	
	public void report_variable(DesignatorIdent designator)
	{
		String message = "Pretraga na  "+designator.getLine()+"("+designator.getName()+"), nadjeno ";
		StringBuilder msg = new StringBuilder(message);
		Obj obj = Tab.find(designator.getName());
		dumpVisitor = new KostaDumpTableVisitor();
		dumpVisitor.visitObjNode(obj);
		log.info(msg.toString() + dumpVisitor.getOutput());
	}
	
	public void visit(StatementSingle statement)
	{
		nStatementsInMain++;
	}
	
	public void visit(StatementSingleList statement)
	{
		nStatementsInMain++;
	}
    
    public void visit(ProgName progName)
    {
    	progName.obj = Tab.insert(Obj.Prog, progName.getProgName(), Tab.noType);
    	Tab.openScope();
    }
    
    public void visit(Program program)
    {
    	Tab.chainLocalSymbols(program.getProgName().obj);
    	Tab.closeScope();
    }
    
    public void visit(Type type)
    {
    	Obj typeNode = Tab.find(type.getType());
    	if(typeNode == Tab.noObj)
    	{
    		errorDetected = true;
    		report_error("Greska("+type.getLine()+") Nije pronadnjen tip " + type.getType() + " u tabeli simbola.", null);
			currentType = typeNode.getType();
    		type.struct = Tab.noType;
    	}
    	else
    	{
    		if(Obj.Type == typeNode.getKind())
    		{
    			currentType = typeNode.getType();
    			type.struct = typeNode.getType();
    			
    			
    			if(typeNode.getType().getKind() == Struct.Enum)
    			{
    				currentEnum = typeNode;
    			}
    		}
    		else
    		{
    			errorDetected = true;
    			report_error("Greska("+type.getLine()+") Nije pronadnjen tip " + type.getType() + " u tabeli simbola.", null);
    			currentType = Tab.noType;
    			type.struct = Tab.noType;
    		}
    	}
    }
    

	public void visit(ErrorVarDeclSEMI error)
	{
		errorDetected = true;
		report_error("Greska("+error.getLine()+") Sintaksna greska.", null);
	}
	
	public void visit(StatementError error)
	{
		errorDetected = true;
		report_error("Greska("+error.getLine()+") Sintaksna greska.", null);
	}
    
    
    public void visit(Variable variable)
    {
    	if(currentType != null)
    	{
    		if(!isDeclared(variable.getVarName()))
    		{
	    		Obj varNode = Tab.insert(Obj.Var, variable.getVarName(), currentType);
	    		if(varNode.getLevel()==0)
	    			nVars++;
	    		else
	    			nLocalsInMain++;
	    		//report_info("Deklarisana promenljiva "+variable.getVarName() +" tipa "+ currentType.getKind() , null);
    		}
    		else
    		{
        		errorDetected = true;
        		report_error("Greska("+variable.getLine()+") Ponovna inicijalizacija promenljive " + variable.getVarName(), null);
    		}
    	}
    	else
    	{
    		errorDetected = true;
    		report_error("Greska("+variable.getLine()+") Inicijalizacija promenljive neuspela.", null);
    	}
    }
    
    public void visit(VariableArray variableArray)
    {
    	if(currentType != null)
	    {
    		if(!isDeclared(variableArray.getVarNameArray()))
			{
	    		Obj varNode = Tab.insert(Obj.Var, variableArray.getVarNameArray(), new Struct(Struct.Array, currentType));
	    		if(varNode.getLevel() == 0)
	    			nArrays++;
	    		else
	    			nLocalsInMain++;
	    		//report_info("Deklarisan niz  "+variableArray.getVarNameArray() +" tipa "+ currentType.getKind() , null);
			}
    		else
    		{
        		errorDetected = true;
        		report_error("Greska("+variableArray.getLine()+") Ponovna inicijalizacija niza.", null);
    		}
    	}
    	else
    	{
    		errorDetected = true;
    		report_error("Greska("+variableArray.getLine()+") Inicijalizacija niza neuspela.", null);
    	}
    }
    
    public void visit(ConstantNum constant)
    {	
    	if(!currentType.equals(Tab.intType))
    	{
    		errorDetected = true;
    		report_error("Greska("+constant.getLine()+") Pogresan tip dodeljen konstanti.", null);
    	}
    	
		Obj constNode = Tab.insert(Obj.Con, constant.getConstName(), Tab.intType);
		constNode.setAdr(constant.getNumVal());
		nConstants++;
		//report_info("Deklarisana konstanta "+constant.getConstName() +" tipa "+ currentType.getKind() + " i vrednosti " + constNode.getAdr() , null);
    }
    
    public void visit(ConstantChar constant)
    {	
    	if(!currentType.equals(Tab.charType))
    	{
    		errorDetected = true;
    		report_error("Greska("+constant.getLine()+") Pogresan tip dodeljen konstanti.", null);
    	}
    	
		Obj constNode = Tab.insert(Obj.Con, constant.getConstName(), Tab.charType);
		constNode.setAdr(constant.getCharVal());
		nConstants++;
		//report_info("Deklarisana konstanta "+constant.getConstName() +" tipa "+ currentType.getKind() + " i vrednosti " + (char)constNode.getAdr() , null);
    }
    
    public void visit(ConstantBool constant)
    {	
    	if(!currentType.equals(BoolType))
    	{
    		errorDetected = true;
    		report_error("Greska("+constant.getLine()+") Pogresan tip dodeljen konstanti.", null);
    	}
    	
		Obj constNode = Tab.insert(Obj.Con, constant.getConstName(), BoolType);
		constNode.setAdr(constant.getBoolVal().equals("true") ? 1 : 0);
		nConstants++;
		//report_info("Deklarisana konstanta "+constant.getConstName() +" tipa "+ currentType.getKind() + " i vrednosti " + constNode.getAdr() , null);
    }
    
    public void visit(MethodTypeWithName methodTypeName){
    	currentMethod = Tab.insert(Obj.Meth, methodTypeName.getMethName(), methodTypeName.getType().struct);
    	currentMethodName = methodTypeName.getMethName();
    	methodTypeName.obj = currentMethod;

    	Tab.openScope();
		//report_info("Obradjuje se funkcija " + methodTypeName.getMethName(), methodTypeName);
    }
    
    public void visit(MethodVoidWithName methodTypeName){
    	currentMethod = Tab.insert(Obj.Meth, methodTypeName.getMethName(), Tab.noType);
    	currentMethodName = methodTypeName.getMethName();
    	methodTypeName.obj = currentMethod;
    	
    	Tab.openScope();
		//report_info("Obradjuje se funkcija " + methodTypeName.getMethName(), methodTypeName);
    }
    
    public void visit(MethodDeclaration methodDeclaration)
    {
    	Tab.chainLocalSymbols(currentMethod);
    	Tab.closeScope();
    	
    	currentMethod = null;
    }
    
    public void visit(MethodDeclarationNoPars methodDeclaration)
    {
    	Tab.chainLocalSymbols(currentMethod);
    	Tab.closeScope();    	
    	if(currentMethodName.equals("main") && currentMethod.getType() == Tab.noType)
    	{
    		hasMain = true;
    		//report_info("Main method found!", null);
    	}
    	
    	currentMethod = null;
    }
    
    public void visit(EnumName enumName)
    {
    	if(isDeclared(enumName.getEnumName()))
    	{
    		errorDetected = true;
    		report_error("Greska("+enumName.getLine()+") Ponovna deklaracija istog enuma.", null);
    	}
    	Struct enumType = new Struct(Struct.Enum);
    	enumType.setElementType(new Struct(enumidfree++));
    	currentEnum = Tab.insert(Obj.Type, enumName.getEnumName(),enumType);
    	currentEnumValue = -1;
    	enumValues = new ArrayList<Integer>();
    	declaredEnums.add(currentEnum);
    	enumName.obj = currentEnum;
    	Tab.openScope();
    }
    
    public void visit(EnumDeclarationIntroduction enumDeclarationIntroduction)
    {
    	Tab.chainLocalSymbols(currentEnum);
    	Tab.closeScope();
    	
    	currentEnum = null;
    	currentEnumValue = -1;
    }
    
    public void visit(EnumDeclaration enumDeclaration)
    {
    	if(currentEnum == null)
    	{
    		errorDetected = true;
    		report_error("Greska("+enumDeclaration.getLine()+") Deklaracija enuma nije uspela.", null);
    		return;
    	}
    	
    	if(enumValues.contains(currentEnumValue+1))
    	{
    		errorDetected = true;
    		report_error("Greska("+enumDeclaration.getLine()+") Deklaracija enuma nije uspela.", null);
    		return;
    	}
    	
    	Obj enumNode = Tab.insert(Obj.Con, enumDeclaration.getEnumName(), Tab.intType);
    	enumNode.setAdr(currentEnumValue+1);
    	currentEnumValue++;
    	enumValues.add(currentEnumValue);
    	//report_info("Deklarisana enum vrednost za "+currentEnum.getName()+" sa imenom "+enumDeclaration.getEnumName()+" i vrednoscu "+currentEnumValue, null);
    }
    
    public void visit(EnumDeclarationWithValue enumDeclaration)
    {
    	if(currentEnum == null)
    	{
    		errorDetected = true;
    		report_error("Greska("+enumDeclaration.getLine()+") Deklaracija enuma nije uspela.", null);
    		return;
    	}
    	
    	if(enumValues.contains(enumDeclaration.getEnumValue()))
    	{
    		errorDetected = true;
    		report_error("Greska("+enumDeclaration.getLine()+") Deklaracija enuma nije uspela.", null);
    		return;
    	}
    	
    	Obj enumNode = Tab.insert(Obj.Con, enumDeclaration.getEnumName(), Tab.intType);
    	enumNode.setAdr(enumDeclaration.getEnumValue());
    	//report_info("DEKLASIRAN ENUM SA "+enumDeclaration.getEnumValue()+" "+enumDeclaration.getEnumName(), null);
    	currentEnumValue = enumDeclaration.getEnumValue();
    	enumValues.add(currentEnumValue);
    	
    	//report_info("Deklarisana enum vrednost za "+currentEnum.getName()+" sa imenom "+enumDeclaration.getEnumName()+" i vrednoscu "+currentEnumValue, null);
    }
    
    public void visit(DesignatorIdent designator)
    {    	
    	Obj obj = Tab.find(designator.getName());
    	if(obj == Tab.noObj)
    	{
    		errorDetected = true;
    		report_error("Greska("+designator.getLine()+") Promenljiva ne postoji.", null);
    	}
    	designator.obj = obj;
    	currentDesignatorType = obj.getType();
    	report_variable(designator);
    }
    
    public void visit(DesignatorBasic designator)
    {    	
    	Obj obj = designator.getDesignatorIdent().obj;
    	designator.obj = obj;
    }
    
    public void visit(DesignatorBasicArray designator)
    {    	
    	Obj obj = designator.getDesignatorIdentArray().obj;
    	designator.obj = obj;
    }
    
    public void visit(Term term)
    {
    	if(term.getFactor().struct.getKind() == Struct.Array)
    	{
    		term.struct  = term.getFactor().struct.getElemType();
    	}
    	else if(term.getFactor().struct.getKind() == Struct.Enum)
    		term.struct = Tab.intType;
    	else
    		term.struct = term.getFactor().struct;
    	if(!term.getTermList().struct.equals(Tab.noType))
    	{
    		Struct myType = term.struct;
    		Struct listType = term.getTermList().struct;
    		if(!myType.equals(listType))
    		{
    			errorDetected = true;
    			report_error("Greska("+term.getLine()+") Neslaganje tipova u termu.", null);
    		}
    	}
    }
    
    public void visit(TermNeg term)
    {
    	if(term.getFactor().struct.getKind() == Struct.Array)
    	{
    		term.struct  = term.getFactor().struct.getElemType();
    	}
    	else if(term.getFactor().struct.getKind() == Struct.Enum)
    		term.struct = Tab.intType;
    	else
    		term.struct = term.getFactor().struct;
    	if(!term.getTermList().struct.equals(Tab.noType))
    	{
    		Struct myType = term.struct;
    		Struct listType = term.getTermList().struct;
    		if(!myType.equals(listType))
    		{
    			errorDetected = true;
    			report_error("Greska("+term.getLine()+") Neslaganje tipova u termu.", null);
    		}
    	}
    }
    
    public void visit(TermListMulopMul term)
    {
    	if(term.getFactor().struct.getKind() == Struct.Array)
    	{
    		term.struct  = term.getFactor().struct.getElemType();
    		//report_info("ELEM TYPE JE "+term.struct.getKind(), null);
    	}
    	else if(term.getFactor().struct.getKind() == Struct.Enum)
    		term.struct = Tab.intType;
    	else
    		term.struct = term.getFactor().struct;
    	if(!term.struct.equals(Tab.intType))
    	{
    		errorDetected = true;
    		report_error("Greska("+term.getLine()+") Pogresni tipovi u izrazu sa mnozenjem.", null);
    	}
    }
    
    public void visit(TermListMulopDiv term)
    {
    	if(term.getFactor().struct.getKind() == Struct.Array)
    	{
    		term.struct  = term.getFactor().struct.getElemType();
    		//report_info("ELEM TYPE JE "+term.struct.getKind(), null);
    	}
    	else if(term.getFactor().struct.getKind() == Struct.Enum)
    		term.struct = Tab.intType;
    	else
    		term.struct = term.getFactor().struct;
    	if(!term.struct.equals(Tab.intType))
    	{
    		errorDetected = true;
    		report_error("Greska("+term.getLine()+") Pogresni tipovi u izrazu sa deljenjem.", null);
    	}
    }
    
    public void visit(TermListMulopMod term)
    {
    	if(term.getFactor().struct.getKind() == Struct.Array)
    	{
    		term.struct  = term.getFactor().struct.getElemType();
    		report_info("ELEM TYPE JE "+term.struct.getKind(), null);
    	}
    	else if(term.getFactor().struct.getKind() == Struct.Enum)
    		term.struct = Tab.intType;
    	else
    		term.struct = term.getFactor().struct;
    	if(!term.struct.equals(Tab.intType))
    	{
    		errorDetected = true;
    		report_error("Greska("+term.getLine()+") Pogresni tipovi u izrazu sa mod operatorom.", null);
    	}
    }
    
    public void visit(TermListNone term)
    {
    	term.struct = Tab.noType;
    }
    
    public void visit(ExprPlus expr)
    {
    	expr.struct = expr.getTerm().struct;
    	if(!expr.getExprList().struct.equals(Tab.noType))
    	{
    		Struct myType = expr.struct;
    		Struct listType = expr.getExprList().struct;
    		if(!myType.equals(listType))
    		{
    			errorDetected = true;
    			report_error("Greska("+expr.getLine()+") Neslaganje tipova u izrazu.", null);
    		}
    	}
    }
    
    public void visit(ExprMinus expr)
    {
    	expr.struct =  expr.getTermNeg().struct;
    	if(!expr.getExprList().struct.equals(Tab.noType))
    	{
    		Struct myType = expr.struct;
    		Struct listType = expr.getExprList().struct;
    		if(!myType.equals(listType))
    		{
    			errorDetected = true;
    			report_error("Greska("+expr.getLine()+") Neslaganje tipova u izrazu.", null);
    		}
    	}
    	if(!expr.struct.equals(Tab.intType))
    	{
			errorDetected = true;
			report_error("Greska("+expr.getLine()+") Pogresi tipovu u izrazu sa negacijom.", null);
    	}
    }
    
    public void visit(ExprListAddopAdd exprList)
    {
    	exprList.struct = exprList.getTerm().struct;
    	if(!exprList.getExprList().struct.equals(Tab.noType))
    	{
    		Struct myType = exprList.struct;
    		Struct listType = exprList.getExprList().struct;
    		if(!myType.equals(listType))
    		{
    			errorDetected = true;
    			report_error("Greska("+exprList.getLine()+") Neslaganje tipova u izrazu.", null);
    		}
    	}
    	
    	if(!exprList.getTerm().struct.equals(Tab.intType))
    	{
			errorDetected = true;
			report_error("Greska("+exprList.getLine()+") Pogresni tipovi u izrazu sa sabiranjem.", null);
    	}
    }
    
    public void visit(ExprListAddopSub exprList)
    {
    	exprList.struct = exprList.getTerm().struct;
    	if(!exprList.getExprList().struct.equals(Tab.noType))
    	{
    		Struct myType = exprList.struct;
    		Struct listType = exprList.getExprList().struct;
    		if(!myType.equals(listType))
    		{
    			errorDetected = true;
    			report_error("Greska("+exprList.getLine()+") Neslaganje tipova u izrazu.", null);
    		}
    	}
    	
    	if(!exprList.getTerm().struct.equals(Tab.intType))
    	{
			errorDetected = true;
			report_error("Greska("+exprList.getLine()+") Pogresni tipovi u izrazu sa oduzimanjem.", null);
    	}
    }
    
    public void visit(ExprListNone exprList)
    {
    	exprList.struct = Tab.noType;
    }
    
    public void visit(FactorNumConst factor)
    {
    	factor.struct = Tab.intType;
    }
    
    public void visit(FactorCharConst factor)
    {
    	factor.struct = Tab.charType;
    }
    
    public void visit(FactorBoolConst factor)
    {
    	factor.struct = BoolType;
    }
    
    public void visit(FactorExprInBrackets factor)
    {
    	factor.struct = factor.getExpr().struct;
    }
    
    public void visit(FactorArrayInit factor)
    {
    	factor.struct = currentType;
    	if(!factor.getExpr().struct.equals(Tab.intType))
    	{
			errorDetected = true;
			report_error("Greska("+factor.getLine()+") Elementu niza ne moze da se pristupi sa datim izrazom.", null);
    	}
    	
    }
    
    public void visit(FactorEnum factor)
    {
    	factor.struct = Tab.intType;
    }
    
    public void visit(FactorDesignator factor)
    {
    	factor.struct = factor.getDesignator().obj.getType();
    }
    
    public void visit(DesignatorStatementAssign stmt)
    {    	
    	Struct designatorStruct = stmt.getDesignator().obj.getType();
    	Struct exprStruct = stmt.getExpr().struct;
    	
		
    	if(designatorStruct.getKind() != Struct.Array && designatorStruct.getKind() != Struct.Enum && !designatorStruct.equals(exprStruct))
    	{
			errorDetected = true;
			report_error("Greska("+stmt.getLine()+") Neslaganje tipova prilikom dodele.", null);
    	}
		if(designatorStruct.getKind() == Struct.Enum && designatorStruct.getElemType().getKind() != lastAccessedEnum)
		{
			errorDetected = true;
			report_error("Greska("+stmt.getLine()+") Neslaganje tipova prilikom dodele.", null);
		}		
		log.info("DesignatorStructElem = "+designatorStruct.getElemType().getKind()+" expr elem="+lastAccessedEnum);
    }
    
    public void visit(DesignatorArrayInit stmt)
    {
    	Struct designatorStruct = stmt.getDesignator().obj.getType();
    	
    	if(designatorStruct.getKind() != Struct.Array)
    	{
			errorDetected = true;
			report_error("Greska("+stmt.getLine()+") Neslaganje tipova prilikom inicijalizacije niza.", null);
			return;
    	}
    	
    	if(!designatorStruct.getElemType().equals(stmt.getFactorArrayInit().struct))
    	{
			errorDetected = true;
			report_error("Greska("+stmt.getLine()+") Neslaganje tipova prilikom inicijalizacije niza.", null);
    	}
    }
    
    public void visit(DesignatorStatementPlusPlus stmt)
    {    	
    	Struct designatorStruct = stmt.getDesignator().obj.getType();
    	
    	if(!designatorStruct.equals(Tab.intType))
    	{
    		if(designatorStruct.getKind() == Struct.Array && designatorStruct.getElemType().equals(Tab.intType))
    			return;
			errorDetected = true;
			report_error("Greska("+stmt.getLine()+") Neslaganje tipova prilikom operacije inkrementiranja.", null);
    	}
    }
    
    public void visit(DesignatorStatementMinusMinus stmt)
    {    	
    	Struct designatorStruct = stmt.getDesignator().obj.getType();
    	
    	if(!designatorStruct.equals(Tab.intType))
    	{
    		if(designatorStruct.getKind() == Struct.Array && designatorStruct.getElemType().equals(Tab.intType))
    			return;
			errorDetected = true;
			report_error("Greska("+stmt.getLine()+") Neslaganje tipova prilikom operacije dekrementiranja.", null);
    	}
    }
    
    public void visit(DesignatorIdentDot designator)
    {
    	Obj typeNode = Tab.find(designator.getTypeName());
    	if(typeNode == Tab.noObj)
    	{
    		report_error("Greska("+designator.getLine()+") Pristupanje nedeklarisanom tipu nabrajanja.", null);
			return;
    	}
    	Struct designatorStruct = typeNode.getType();
    	if(designatorStruct.getKind() != Struct.Enum)
    	{
			errorDetected = true;
			report_error("Greska("+designator.getLine()+") Pristupanje nedeklarisanom tipu nabrajanja.", null);
			return;
    	}
    	
    	Obj child = Tab.noObj;
    	for(Obj childObj : currentEnum.getLocalSymbols())
    	{
    		if(childObj.getName().equals(designator.getName()))
    		{
    			child = childObj;
    		}
    	}
    	if(child == Tab.noObj)
    	{
			errorDetected = true;
			report_error("Greska("+designator.getLine()+") Nabrajanje ne postoji.", null);
			return;
    	}
    	designator.obj = child;

    	lastAccessedEnum = typeNode.getType().getElemType().getKind();
    }
    
    public void visit(DesignatorIdentArray designator)
    {
    	Obj parent = designator.getDesignatorIdentArrayStart().obj;
    	designator.obj = parent;
    	if(parent ==null || parent.getType().getKind() != (Struct.Array))
    	{
			errorDetected = true;
			report_error("Greska("+designator.getLine()+") Greska pri pristupanju elementu niza.", null);
			return;
    	}
    	
    	if(!designator.getExpr().struct.equals(Tab.intType))
    	{
			errorDetected = true;
			report_error("Greska("+designator.getLine()+") Greska pri pristupanju elementu niza datim izrazom.", null);
			return;
    	}
    }
    
    public void visit(DesignatorIdentArrayStart designator)
    {
    	Obj parent = designator.getDesignatorIdent().obj;
    	designator.obj = parent;
    }
    
    public void visit(StmntRead stmt)
    {
    	Struct type = stmt.getDesignator().obj.getType();
    	if(type != Tab.intType && type != Tab.charType && type != BoolType)
    	{
    		errorDetected = true;
    		report_error("Greska("+stmt.getLine()+") Read komanda zahteva drugi tip.", null);
    	}
    }
    
    public void visit(StmntPrint stmt)
    {
    	Struct type = stmt.getExpr().struct;
    	if(type != Tab.intType && type != Tab.charType)
    	{
    		errorDetected = true;
    		report_error("Greska("+stmt.getLine()+") Print komanda zahteva drugi tip.", null);
    	}
    }
    
    public boolean hasErrors()
    {
    	return errorDetected || !hasMain;
    }
}
