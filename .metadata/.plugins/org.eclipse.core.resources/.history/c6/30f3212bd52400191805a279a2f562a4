package rs.ac.bg.etf.pp1;
import java_cup.runtime.Symbol;
%%

%{

	private Symbol new_symbol(int type)
	{
		return new Symbol(type, yyline+1, yycolumn);
	}
	
	private Symbol new_symbol(int type, Object value)
	{
		return new Symbol(type, yyline+1, yycolumn, value);
	}

%}


%cup
%line
%column

%xstate COMMENT

%eofval{
return new_symbol(sym.EOF);
%eofval}

%%

" "		{ }
"\b" 	{ }
"\t" 	{ }
"\r\n" 	{ }
"\f" 	{ }

"program"   { return new_symbol(sym.PROG, yytext());}
"break"		{ return new_symbol(sym.BREAK, yytext());}
"class"		{ return new_symbol(sym.CLASS, yytext());}
"interface" { return new_symbol(sym.INTERFACE, yytext());}
"break"		{ return new_symbol(sym.BREAK, yytext());}
"enum"   	{ return new_symbol(sym.ENUM, yytext()); }
"else"		{ return new_symbol(sym.ELSE, yytext());}
"const"     { return new_symbol(sym.CONST, yytext());}
"if"        { return new_symbol(sym.IF, yytext());}
"new"       { return new_symbol(sym.NEW, yytext());}
"print"     { return new_symbol(sym.PRINT, yytext());}
"read"      { return new_symbol(sym.READ, yytext());}
"void"      { return new_symbol(sym.VOID, yytext());}
"for"       { return new_symbol(sym.FOR, yytext());}
"extends"   { return new_symbol(sym.EXTENDS, yytext());}
"continue"  { return new_symbol(sym.CONTINUE, yytext());}
"return"    { return new_symbol(sym.RETURN, yytext());}

"true"      { return new_symbol(sym.BOOLCONST, yytext());}
"false"     { return new_symbol(sym.BOOLCONST, yytext());}

"+" 		{ return new_symbol(sym.PLUS, yytext()); }
"-"         { return new_symbol(sym.MINUS, yytext());}
"*"         { return new_symbol(sym.MUL, yytext());}
"/"         { return new_symbol(sym.DIV, yytext());}
"%"         { return new_symbol(sym.MOD, yytext());}
"=="        { return new_symbol(sym.EQUALDOUBLE, yytext());}
"!="        { return new_symbol(sym.NOTEQUAL, yytext());}
">"         { return new_symbol(sym.GREATER, yytext());}
">="        { return new_symbol(sym.GREATEREQUAL, yytext());}
"<"         { return new_symbol(sym.LESS, yytext());}
"<="        { return new_symbol(sym.LESSEQUAL, yytext());}
"&&"        { return new_symbol(sym.ANDAND, yytext());}
"||"        { return new_symbol(sym.OROR, yytext());}
"=" 		{ return new_symbol(sym.EQUAL, yytext()); }
"++"        { return new_symbol(sym.PLUSPLUS, yytext());}
"--"        { return new_symbol(sym.MINUSMINUS, yytext());}
";" 		{ return new_symbol(sym.SEMI, yytext()); }
"," 		{ return new_symbol(sym.COMMA, yytext()); }
"."         { return new_symbol(sym.DOT, yytext());}
"(" 		{ return new_symbol(sym.LPAREN, yytext()); }
")" 		{ return new_symbol(sym.RPAREN, yytext()); }
"{" 		{ return new_symbol(sym.LBRACE, yytext()); }
"}"			{ return new_symbol(sym.RBRACE, yytext()); }
"["         { return new_symbol(sym.LSQRBRAC, yytext());}
"]"         { return new_symbol(sym.RSQRBRAC, yytext());}

"//" {yybegin(COMMENT);}
<COMMENT> . {yybegin(COMMENT);}
<COMMENT> "\r\n" { yybegin(YYINITIAL); }

(['"][a-zA-Z]['"])   { return new_symbol(sym.CHARCONST, yytext()); }
[0-9]+  { return new_symbol(sym.NUMCONST, new Integer (yytext())); }
([a-z]|[A-Z])[a-z|A-Z|0-9|_]* 	{return new_symbol (sym.IDENT, yytext()); }

. { System.err.println("Leksicka greska ("+yytext()+") u liniji "+(yyline+1) +" na koloni "+yycolumn); }